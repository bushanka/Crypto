from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from states import Cases
from datetime import date

# Bot create
bot = Bot(token='1971360278:AAEmqzP0fKTi2a_eaNcMMLn0386ouLuwIT0')
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

# KeyBoard and buttons
button_settings = KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô')
button_help = KeyboardButton('–ü–æ–º–æ—â—å üöë')
button_subscribe = KeyboardButton('–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ üíµ')
button_pay = KeyboardButton('–ù–µ —Å–µ–≥–æ–¥–Ω—è!')
button_volume = KeyboardButton('–û–±—ä–µ–º—ã')
button_pay_meth = KeyboardButton('–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã')
button_nick_binance = KeyboardButton('–ú–æ–π –Ω–∏–∫ –Ω–∞ Binance')
button_settings_exit = KeyboardButton('–ù–∞–∑–∞–¥')
button_pay_tinkoff = KeyboardButton('–¢–∏–Ω—å–∫–æ—Ñ—Ñ')
button_pay_sber = KeyboardButton('–°–±–µ—Ä–±–∞–Ω–∫')
button_pay_tinkoff_and_sber = KeyboardButton('–¢–∏–Ω—å–∫–æ—Ñ—Ñ –∏–ª–∏ –°–±–µ—Ä–±–∞–Ω–∫')
button_percent = KeyboardButton('–ü—Ä–æ—Ü–µ–Ω—Ç')
button_min_amount = KeyboardButton('–ù–∏–∂–Ω–∏–π –ª–∏–º–∏—Ç')
button_binance_settings = KeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Binance')
button_garantex_settings = KeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Garantex')
button_bitzlato_settings = KeyboardButton('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Bitzlato')
button_exchanges = KeyboardButton('–ë–∏—Ä–∂–∏')
button_money_settings = KeyboardButton('–¢–æ—Ä–≥–æ–≤–ª—è')

main_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
main_kb.add(button_settings, button_subscribe)
# main_kb.add(button_subscribe)
# main_kb.add(button_help)

pay_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
pay_kb.add(button_pay)

settings_kb_exch = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
settings_kb_exch.add(button_binance_settings, button_garantex_settings, button_bitzlato_settings, button_settings_exit)

settings_kb_trade = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
settings_kb_trade.add(button_volume, button_pay_meth, button_percent, button_min_amount, button_settings_exit)

pay_methods_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
pay_methods_kb.add(button_pay_tinkoff, button_pay_sber, button_pay_tinkoff_and_sber)

sub_settings_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
sub_settings_kb.add(button_exchanges, button_money_settings, button_settings_exit)


def sql_command(command_text, params=None):
    connection = False
    data = None
    try:
        connection = sqlite3.connect('data.db')
        cursor = connection.cursor()
        if params is None:
            cursor.execute(command_text)
            data = cursor.fetchall()
        else:
            cursor.execute(command_text, params)
            data = cursor.fetchall()
        connection.commit()
        cursor.close()
    except sqlite3.Error as error:
        print("Error while connecting to sqlite", error)
    finally:
        if connection:
            connection.close()
    return data


sql_command("""CREATE TABLE IF NOT EXISTS users_data(
"userid" INT PRIMARY KEY,
"username" TEXT,
"subscriber" INTEGER DEFAULT 0,
"volume" TEXT DEFAULT 100000,
"payment_methods" TEXT DEFAULT 'Tinkoff',
"test_access" TEXT DEFAULT 'Yes',
"time_subscribe" TEXT,
"percent" REAL DEFAULT 0,
"min_amount" INTEGER DEFAULT 5000,
"is_binance_usdt" INTEGER DEFAULT 1,
"is_binance_eth" INTEGER DEFAULT 1,
"is_binance_btc" INTEGER DEFAULT 1);""")


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    message_user = [message.chat.id, message.chat.username]
    data = sql_command("SELECT userid FROM users_data WHERE userid = ?;", params=(message_user[0],))
    if data is None:
        sql_command("""INSERT INTO users_data(userid, username) VALUES(?,?);""", message_user)
        today = date.today()
        d = today.strftime('%Y-%m-%d')
        sql_command("""UPDATE users_data SET subscriber = ? WHERE userid = ?;""", (1, message_user[0]))
        sql_command("""UPDATE users_data SET time_subscribe = ? WHERE userid = ?;""", (d, message_user[0]))
        sql_command("""UPDATE users_data SET test_access = ? WHERE userid = ?;""", ('Yes', message_user[0]))
        sql_command("""UPDATE users_data SET percent = ? WHERE userid = ?;""", (0.1, message_user[0]))
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç!\n\n–¢—É—Ç –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞\n\n"
        "–ß—Ç–æ–±—ã —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞: @BestLoopsBot\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–º—É /start",
        reply_markup=main_kb, reply=False)


@dp.message_handler(lambda message: message.text == '–ü–æ–º–æ—â—å üöë')
async def process_help_command(message: types.Message):
    await message.reply("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º\n–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ üëâ @Captain_Danny", reply_markup=main_kb, reply=False)


@dp.message_handler(lambda message: message.text == '–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ üíµ')
async def process_subscribe_command(message: types.Message):
    subscr_id = str(message.chat.id)
    await message.reply("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 29 USDT –Ω–∞ –æ–¥–∏–Ω –∏–∑ –∞–¥—Ä–µ—Å–æ–≤:",
                        reply_markup=main_kb, reply=False)
    await message.reply(
        "BSC(BEP20): 0x93f5e1069a1cd94c4166c5060b770563fbba12de\n\nTron(TRC20): TE8FdD1RWiBvMsEMdtk5FJwvDQBF2vt7Ai",
        reply=False)
    await message.reply(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∏—Ä–∂—É Binance\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ @e_usovchan —á—Ç–æ –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏\n–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –í–∞—à ID:",
        reply=False)
    await message.reply(subscr_id, reply=False, reply_markup=main_kb)


@dp.message_handler(lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô')
async def process_settings_command(message: types.Message):
    await message.reply("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞", reply_markup=sub_settings_kb, reply=False)
    await Cases.SUB_STATE_SETTINGS.set()


@dp.message_handler(lambda message: message.text == '–ë–∏—Ä–∂–∏', state=Cases.SUB_STATE_SETTINGS)
async def process_settings_command(message: types.Message):
    await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏—Ä–∂–∏", reply_markup=settings_kb_exch, reply=False)
    await Cases.STATE_EXCH_SETTINGS.set()


@dp.message_handler(lambda message: message.text == '–¢–æ—Ä–≥–æ–≤–ª—è', state=Cases.SUB_STATE_SETTINGS)
async def process_settings_command(message: types.Message):
    await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏", reply_markup=settings_kb_trade, reply=False)
    await Cases.STATE_TRADE_SETTINGS.set()


@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥', state=Cases.STATE_EXCH_SETTINGS)
async def process_settings_command(message: types.Message):
    await message.reply("–ì–æ—Ç–æ–≤–æ", reply_markup=sub_settings_kb, reply=False)
    await Cases.SUB_STATE_SETTINGS.set()


@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥', state=Cases.STATE_TRADE_SETTINGS)
async def process_settings_command(message: types.Message):
    await message.reply("–ì–æ—Ç–æ–≤–æ", reply_markup=sub_settings_kb, reply=False)
    await Cases.SUB_STATE_SETTINGS.set()


@dp.message_handler(lambda message: message.text == '–û–±—ä–µ–º—ã', state=Cases.STATE_TRADE_SETTINGS)
async def settings(message: types.Message):
    await message.reply(
        "–ö–∞–∫–∏–µ —É –í–∞—Å –æ–±—ä–µ–º—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É –≤ —Ä—É–±–ª—è—Ö?\n\n–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ —Ç–æ—á–µ–∫, –∑–∞–ø—è—Ç—ã—Ö –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=main_kb, reply=False)
    await Cases.STATE_VOLUME.set()


def exchange_settings_buttons(exch, mes):
    data = sql_command("""SELECT * from users_data WHERE userid = ?""", (mes.chat.id,))
    rec_list = data[0]
    bin_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if exch == 'Binance':
        if rec_list[10] == 1 and rec_list[11] == 1 and rec_list[12] == 1:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[10] == 1 and rec_list[11] == 1 and rec_list[12] == 0:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[10] == 1 and rec_list[11] == 0 and rec_list[12] == 1:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[10] == 1 and rec_list[11] == 0 and rec_list[12] == 0:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[10] == 0 and rec_list[11] == 1 and rec_list[12] == 1:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[10] == 0 and rec_list[11] == 1 and rec_list[12] == 0:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[10] == 0 and rec_list[11] == 0 and rec_list[12] == 1:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[10] == 0 and rec_list[11] == 0 and rec_list[12] == 0:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
    if exch == 'Garantex':
        if rec_list[13] == 1 and rec_list[14] == 1 and rec_list[15] == 1:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[13] == 1 and rec_list[14] == 1 and rec_list[15] == 0:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[13] == 1 and rec_list[14] == 0 and rec_list[15] == 1:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[13] == 1 and rec_list[14] == 0 and rec_list[15] == 0:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[13] == 0 and rec_list[14] == 1 and rec_list[15] == 1:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[13] == 0 and rec_list[14] == 1 and rec_list[15] == 0:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[13] == 0 and rec_list[14] == 0 and rec_list[15] == 1:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[13] == 0 and rec_list[14] == 0 and rec_list[15] == 0:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
    if exch == 'Bitzlato':
        if rec_list[16] == 1 and rec_list[17] == 1 and rec_list[18] == 1:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[16] == 1 and rec_list[17] == 1 and rec_list[18] == 0:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[16] == 1 and rec_list[17] == 0 and rec_list[18] == 1:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[16] == 1 and rec_list[17] == 0 and rec_list[18] == 0:
            bin_kb.add(KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[16] == 0 and rec_list[17] == 1 and rec_list[18] == 1:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'),
                       KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[16] == 0 and rec_list[17] == 1 and rec_list[18] == 0:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[16] == 0 and rec_list[17] == 0 and rec_list[18] == 1:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å BTC'))
        elif rec_list[16] == 0 and rec_list[17] == 0 and rec_list[18] == 0:
            bin_kb.add(KeyboardButton('–í–∫–ª—é—á–∏—Ç—å USDT'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å ETH'), KeyboardButton('–í–∫–ª—é—á–∏—Ç—å BTC'))
    bin_kb.add(KeyboardButton('–ù–∞–∑–∞–¥'))
    return bin_kb


@dp.message_handler(lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Binance', state=Cases.STATE_EXCH_SETTINGS)
async def settings(message: types.Message):
    bin_kb = exchange_settings_buttons('Binance', mes=message)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –º–æ–Ω–µ—Ç—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup=bin_kb, reply=False)
    await Cases.STATE_CHANGE_BINANCE_COIN_SETTINGS.set()


@dp.message_handler(lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Garantex', state=Cases.STATE_EXCH_SETTINGS)
async def settings(message: types.Message):
    bin_kb = exchange_settings_buttons('Garantex', mes=message)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –º–æ–Ω–µ—Ç—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup=bin_kb, reply=False)
    await Cases.STATE_CHANGE_GARANTEX_COIN_SETTINGS.set()


@dp.message_handler(lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Bitzlato', state=Cases.STATE_EXCH_SETTINGS)
async def settings(message: types.Message):
    bin_kb = exchange_settings_buttons('Bitzlato', mes=message)
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –º–æ–Ω–µ—Ç—ã –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        reply_markup=bin_kb, reply=False)
    await Cases.STATE_CHANGE_BITZLATO_COIN_SETTINGS.set()


@dp.message_handler(lambda message: message.text == '–ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã', state=Cases.STATE_TRADE_SETTINGS)
async def settings(message: types.Message):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
        reply_markup=pay_methods_kb, reply=False)
    await Cases.STATE_METHOD.set()


@dp.message_handler(state=Cases.STATE_CHANGE_BINANCE_COIN_SETTINGS)
async def settings(message: types.Message):
    if message.text == '–í—ã–∫–ª—é—á–∏—Ç—å USDT':
        sql_command("""UPDATE users_data SET is_binance_usdt = ? WHERE userid = ?;""", (0, message.chat.id))
        bin_kb = exchange_settings_buttons('Binance', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í—ã–∫–ª—é—á–∏—Ç—å ETH':
        sql_command("""UPDATE users_data SET is_binance_eth = ? WHERE userid = ?;""", (0, message.chat.id))
        bin_kb = exchange_settings_buttons('Binance', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í—ã–∫–ª—é—á–∏—Ç—å BTC':
        sql_command("""UPDATE users_data SET is_binance_btc = ? WHERE userid = ?;""", (0, message.chat.id))
        bin_kb = exchange_settings_buttons('Binance', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å USDT':
        sql_command("""UPDATE users_data SET is_binance_usdt = ? WHERE userid = ?;""", (1, message.chat.id))
        bin_kb = exchange_settings_buttons('Binance', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å ETH':
        sql_command("""UPDATE users_data SET is_binance_eth = ? WHERE userid = ?;""", (1, message.chat.id))
        bin_kb = exchange_settings_buttons('Binance', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å BTC':
        sql_command("""UPDATE users_data SET is_binance_btc = ? WHERE userid = ?;""", (1, message.chat.id))
        bin_kb = exchange_settings_buttons('Binance', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–ù–∞–∑–∞–¥':
        await message.reply('–ì–æ—Ç–æ–≤–æ', reply=False, reply_markup=settings_kb_exch)
        await Cases.STATE_EXCH_SETTINGS.set()
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, –ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply=False, reply_markup=settings_kb_exch)


@dp.message_handler(state=Cases.STATE_CHANGE_GARANTEX_COIN_SETTINGS)
async def settings(message: types.Message):
    if message.text == '–í—ã–∫–ª—é—á–∏—Ç—å USDT':
        sql_command("""UPDATE users_data SET is_garantex_usdt = ? WHERE userid = ?;""", (0, message.chat.id))

        bin_kb = exchange_settings_buttons('Garantex', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í—ã–∫–ª—é—á–∏—Ç—å ETH':
        sql_command("""UPDATE users_data SET is_garantex_eth = ? WHERE userid = ?;""", (0, message.chat.id))
        bin_kb = exchange_settings_buttons('Garantex', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í—ã–∫–ª—é—á–∏—Ç—å BTC':
        sql_command("""UPDATE users_data SET is_garantex_btc = ? WHERE userid = ?;""", (0, message.chat.id))

        bin_kb = exchange_settings_buttons('Garantex', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å USDT':
        sql_command("""UPDATE users_data SET is_garantex_usdt = ? WHERE userid = ?;""", (1, message.chat.id))

        bin_kb = exchange_settings_buttons('Garantex', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å ETH':
        sql_command("""UPDATE users_data SET is_garantex_eth = ? WHERE userid = ?;""", (1, message.chat.id))

        bin_kb = exchange_settings_buttons('Garantex', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å BTC':
        sql_command("""UPDATE users_data SET is_garantex_btc = ? WHERE userid = ?;""", (1, message.chat.id))

        bin_kb = exchange_settings_buttons('Garantex', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–ù–∞–∑–∞–¥':
        await message.reply('–ì–æ—Ç–æ–≤–æ', reply=False, reply_markup=settings_kb_exch)
        await Cases.STATE_EXCH_SETTINGS.set()
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, –ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply=False, reply_markup=settings_kb_exch)


@dp.message_handler(state=Cases.STATE_CHANGE_BITZLATO_COIN_SETTINGS)
async def settings(message: types.Message):
    if message.text == '–í—ã–∫–ª—é—á–∏—Ç—å USDT':
        sql_command("""UPDATE users_data SET is_bz_usdt = ? WHERE userid = ?;""", (0, message.chat.id))

        bin_kb = exchange_settings_buttons('Bitzlato', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í—ã–∫–ª—é—á–∏—Ç—å ETH':
        sql_command("""UPDATE users_data SET is_bz_eth = ? WHERE userid = ?;""", (0, message.chat.id))

        bin_kb = exchange_settings_buttons('Bitzlato', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í—ã–∫–ª—é—á–∏—Ç—å BTC':
        sql_command("""UPDATE users_data SET is_bz_btc = ? WHERE userid = ?;""", (0, message.chat.id))

        bin_kb = exchange_settings_buttons('Bitzlato', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å USDT':
        sql_command("""UPDATE users_data SET is_bz_usdt = ? WHERE userid = ?;""", (1, message.chat.id))

        bin_kb = exchange_settings_buttons('Bitzlato', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å ETH':
        sql_command("""UPDATE users_data SET is_bz_eth = ? WHERE userid = ?;""", (1, message.chat.id))

        bin_kb = exchange_settings_buttons('Bitzlato', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–í–∫–ª—é—á–∏—Ç—å BTC':
        sql_command("""UPDATE users_data SET is_bz_btc = ? WHERE userid = ?;""", (1, message.chat.id))

        bin_kb = exchange_settings_buttons('Bitzlato', mes=message)
        await message.reply("–ò–∑–º–µ–Ω–µ–Ω–æ", reply=False, reply_markup=bin_kb)
    elif message.text == '–ù–∞–∑–∞–¥':
        await message.reply('–ì–æ—Ç–æ–≤–æ', reply=False, reply_markup=settings_kb_exch)
        await Cases.STATE_EXCH_SETTINGS.set()
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, –ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply=False, reply_markup=settings_kb_exch)


@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥', state=Cases.SUB_STATE_SETTINGS)
async def settings(message: types.Message, state: FSMContext):
    await message.reply(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=main_kb, reply=False)
    await state.reset_state()


@dp.message_handler(state=Cases.STATE_VOLUME)
async def settings(message: types.Message):
    volume_text = message.text
    if volume_text.isdigit():
        sql_command("""UPDATE users_data SET volume = ? WHERE userid = ?;""", (volume_text, message.chat.id))

        await message.reply("–¢–µ–ø–µ—Ä—å –≤–∞—à –æ–±—ä–µ–º: {:,} ‚ÇΩ".format(int(volume_text)), reply_markup=settings_kb_trade,
                            reply=False)
        await Cases.STATE_TRADE_SETTINGS.set()
    else:
        await message.reply("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=sub_settings_kb, reply=False)


@dp.message_handler(state=Cases.STATE_METHOD)
async def settings(message: types.Message):
    method_text = message.text
    if method_text == '–¢–∏–Ω—å–∫–æ—Ñ—Ñ':
        sql_command("""UPDATE users_data SET payment_methods = ? WHERE userid = ?;""", ('Tinkoff', message.chat.id))

        await message.reply(f"–í–∞—à–∏ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã: {method_text}", reply_markup=settings_kb_trade, reply=False)
        await Cases.STATE_TRADE_SETTINGS.set()
    elif method_text == '–°–±–µ—Ä–±–∞–Ω–∫':
        sql_command("""UPDATE users_data SET payment_methods = ? WHERE userid = ?;""", ('Sberbank', message.chat.id))

        await message.reply(f"–í–∞—à–∏ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã: {method_text}", reply_markup=settings_kb_trade, reply=False)
        await Cases.STATE_TRADE_SETTINGS.set()
    elif method_text == '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –∏–ª–∏ –°–±–µ—Ä–±–∞–Ω–∫':
        sql_command("""UPDATE users_data SET payment_methods = ? WHERE userid = ?;""",
                    ('Tinkoff,Sberbank', message.chat.id))

        await message.reply(f"–í–∞—à–∏ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã: {method_text}", reply_markup=settings_kb_trade, reply=False)
        await Cases.STATE_TRADE_SETTINGS.set()
    else:
        await message.reply("–¢–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –≤—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥—Ä—É–≥–∏–µ",
                            reply_markup=pay_methods_kb, reply=False)


@dp.message_handler(lambda message: message.text == '–ü—Ä–æ—Ü–µ–Ω—Ç', state=Cases.STATE_TRADE_SETTINGS)
async def settings(message: types.Message):
    await message.reply(
        "–ü—Ä–∏ –∫–∞–∫–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø—Ä–µ–¥–µ?\n\n–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –±–µ–∑ –¥—Ä—É–≥–∏—Ö –∑–Ω–∫–∞–æ–≤ (–ü—Ä–∏–º–µ—Ä: 0.7)",
        reply_markup=main_kb, reply=False)
    await Cases.STATE_PERCENT.set()


@dp.message_handler(lambda message: message.text == '–ù–∏–∂–Ω–∏–π –ª–∏–º–∏—Ç', state=Cases.STATE_TRADE_SETTINGS)
async def settings(message: types.Message):
    await message.reply(
        "–ù–∞ –∫–∞–∫—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –í–∞–º –ø—Ä–æ–¥–∞–≤–∞–ª–∏ –∫—Ä–∏–ø—Ç—É? –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=main_kb, reply=False)
    await Cases.STATE_MIN_AMOUNT.set()


@dp.message_handler(state=Cases.STATE_PERCENT)
async def settings(message: types.Message):
    percent_text = message.text
    if percent_text.replace('.', '', 1).replace('-', '', 1).isdigit():
        sql_command("""UPDATE users_data SET percent = ? WHERE userid = ?;""", (float(percent_text), message.chat.id))
        await message.reply("–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç: {}".format(percent_text), reply_markup=settings_kb_trade, reply=False)
        await Cases.STATE_TRADE_SETTINGS.set()

    else:
        await message.reply('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@dp.message_handler(state=Cases.STATE_MIN_AMOUNT)
async def settings(message: types.Message):
    percent_text = message.text
    if percent_text.isdigit():
        sql_command("""UPDATE users_data SET min_amount = ? WHERE userid = ?;""",
                    (float(percent_text), message.chat.id))

        await message.reply("–ù–∏–∂–Ω–∏–π –ª–∏–º–∏—Ç: {:,} ‚ÇΩ".format(int(percent_text)), reply_markup=settings_kb_trade,
                            reply=False)
        await Cases.STATE_TRADE_SETTINGS.set()

    else:
        await message.reply('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


if __name__ == '__main__':
    executor.start_polling(dp)
